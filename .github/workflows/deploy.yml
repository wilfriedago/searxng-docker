name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild containers'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Copy files to VPS
      run: |
        scp -r ./* ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_DEPLOY_PATH }}/

    - name: Deploy on VPS
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd ${{ secrets.VPS_DEPLOY_PATH }}

          # Make scripts executable
          chmod +x scripts/deploy.sh
          chmod +x scripts/backup.sh
          chmod +x scripts/restore.sh
          chmod +x scripts/health-check.sh

          # Run deployment script
          ./scripts/deploy.sh ${{ github.event.inputs.force_rebuild || 'false' }}
        EOF

    - name: Health check
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd ${{ secrets.VPS_DEPLOY_PATH }}
          ./scripts/health-check.sh
        EOF

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment completed successfully"
        else
          echo "❌ Deployment failed"
          exit 1
        fi
